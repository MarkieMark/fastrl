# fastrl

Fast C++ Implementation of Reinforcement Learning

The initial code is a largely direct translation of
BURLAP https://github.com/jmacglashan/burlap from Java to C++
with thanks mainly to James MacGlashan

Aspects such as Reflection, GUI leverage Qt5


TODO list
---------
1  Visual elements; Qt5    
2  Debugging    
3  Attributions    
4  Destructors; Memory Management more generally; smart pointers  
5  Alternative entry points (translation from BURLAP)    
6  Translation of more Algorithms / Domains    
7  Reflection in main.cpp to handle different entry points    
8  Pointerization as much as possible to avoid overhead  
9  Linking Tensorflow c++ API for implementation of Deep Q Learning etcetera;
   possibly a translation of keras-rl https://github.com/matthiasplappert/keras-rl
10 Transfer / adjust more documentation comments
11 Make the c++ more idiomatic
12 More 'native' handling of copy() / toString() bearing in mind the need for
   some Q_OBJECT functionality while Q_OBJECT 'deletes' copy()

Debugging Task List
-------------------
dynamic_cast<> testing for multipurpose objects, usually keys;
scrutinize the translation's use of key / value pairs as KeyContainer / integer
scrutinize use of pointers to avoid copying; scrutinize use of references to / values of, vectors
Monitor initial code paths for blank variables
