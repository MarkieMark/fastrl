# fastrl

Fast C++ Implementation of Reinforcement Learning

The initial code is a largely direct translation of
BURLAP https://github.com/jmacglashan/burlap from Java to C++
with thanks mainly to James MacGlashan

Aspects such as Reflection, GUI leverage Qt5


TODO list [not necessarily priority ordered]
--------------------------------------------
1  Visual elements; Qt5    
2  Debugging
3  Attributions; most code principally derived from James MacGlashan's BURLAP Java code
4  Destructors; Memory Management more generally; smart pointers
5  Translation of more Algorithms / Domains
6  Pointerization as much as possible to avoid overhead Â 
7  Linking Tensorflow c++ API for implementation of Deep Q Learning etcetera;
   possibly a translation of keras-rl https://github.com/matthiasplappert/keras-rl
8  Transfer / adjust more documentation comments; ; pick a system for auto generation, add function descriptions in the proper places; for the time being the similarity to BURLAP may allow consultation of BURLAP documentation
9  Make the c++ more idiomatic
10 More 'native' handling of copy() / to_string() bearing in mind the need for
   some Q_OBJECT functionality while Q_OBJECT 'deletes' copy()
11 Thread safe implementation of the shell streams redirection to GUI elements; c++ wrapper-oriented modification of Java stream inheritance methodology
12 Override `operator==` for relevant [`State` etc] classes that leverage hashing / 'hashable' / override `.equals()` in BURLAP.
13 Address the inspection overrides gradually
14 consider refactoring minimizing use of [.h] & [.cpp] when one [.hpp] would compile happily [predeclaring class names is sufficient, no cyclical function signature references]
15 Add stochastic games classes in `src/behavior/stochasticgames` & `src/oosa_domain/stochasticgames`
16 Add more worlds than gridworld in `/src/oosa_domain/singleagent/`
17 `const`ify functions that don't modify the args and/or the instance


Debugging Task List
-------------------
dynamic_cast<> testing for multipurpose objects, usually keys;
scrutinize the translation's use of key / value pairs as KeyContainer / integer
scrutinize use of pointers to avoid copying (compare relevant Java semantics); scrutinize use of references to / values of, vectors
Monitor initial code paths for blank variables
Valgrind check for leaks
check for class name duplication / ambiguity in view of the more generic 'import' mechanism
Multipurpose the interaction mechanism between User Input thread and work thread so that it works for both shell and GUI User Input interfaces
Fully implement & debug all the planning/learning algorithms invokable in the gridworld; add POMDP, Model Learning, Actor/Critic inc TD Lambda & helper classes.

Equality task list
-------------------------------
Classes that need to override operator==

behavior/functionapproximation/FunctionGradient
behavior/functionapproximation/sparse/tilecoding/Tiling
behavior/policy/support/AnnotatedAction
behavior/singleagent/learning/modellearning/models/TabularModel
behavior/singleagent/options/SubgoalOption
behavior/singleagent/options/MacroAction
behavior/singleagent/planning/stochastic/montecarlo/uct/UCTStateNode
behavior/singleagent/planning/stochastic/sparsesampling/SparseSampling
behavior/singleagent/planning/stochastic/valueiteration/PrioritizedSweeping
behavior/singleagent/planning/deterministic/SearchNode
behavior/singleagent/planning/deterministic/informed/PrioritizedSearchNode
behavior/singleagent/interfaces/rlglue/RLGlueState
behavior/singleagent/interfaces/rlglue/RLGlueDomain
mdp/stochasticgames/JointAction
mdp/stochasticgames/agent/SGAgentType
mdp/core/oo/state/OOVariableKey
mdp/core/oo/propositional/GroundedProp
mdp/core/oo/propositional/PropositionalFunction
mdp/core/state/NullState
mdp/core/action/SimpleAction
mdp/singleagent/oo/ObjectParameterizedActionType
mdp/singleagent/pomdp/beliefstate/TabularBeliefState
domain/stochasticgames/normalform/SingleStageNormalFormGame
domain/stochasticgames/gridgame/GridGameStandardMechanics
domain/singleagent/graphdefined/GraphDefinedDomain
domain/singleagent/lunarlander/LunarLanderDomain
domain/singleagent/gridworld/GridWorldTerminalFunction
domain/singleagent/pomdp/tiger/TigerState

equivalents for implementations of hashable marker
statehashing/simple/IDSimpleHashableState
statehashing/simple/IISimpleHashableState
statehashing/WrappedHashableState
as
mdp/core/state/State

Comparison task list
--------------------
classes that need to override comparison operators

behavior/singleagent/planning/deterministic/informed/PrioritizedSearchNode

all classes used as keys for a map, including
mdp/core/state/State